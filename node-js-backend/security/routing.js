const express = require('express');
const router = express.Router();

const UserController = require('../controllers/user.controller');
const CallController = require('../controllers/call.controller');
const HomeController = require('../controllers/home');

const passport = require('passport');
const path = require('path');

const authStrategy = passport.authenticate('jwt', {session: false});

require('./../middleware/passport')(passport)
/* GET home page. */
router.get('/', function (req, res, next) {
    res.json({status: "success", message: "Parcel Pending API", data: {"version_number": "v1.0.0"}})
});

// Create user with 'name' 'password' form parameters
router.post('/users', UserController.create);
// Get user
router.get('/users', authStrategy, UserController.get);
// Update user password
router.put('/users', authStrategy, UserController.update);
// Delete user
router.delete('/users', authStrategy, UserController.remove);
// Login
router.post('/users/login', UserController.login);

// Create call
router.post('/calls', authStrategy, CallController.create);
// Set is_robocall attribute for a call specified by 'id' form parameter
router.put('/calls', authStrategy, CallController.setRobocall);
// Delete a call specified by 'id' form parameter
router.delete('/calls', authStrategy, CallController.remove);
// Get all calls (paginated by 'page', 'size' parameters)
router.get('/calls', authStrategy, CallController.getAll);
// Get a call specified by 'id' parameter which supposed to be unique autogenerated by database
router.get('/calls/id', authStrategy, CallController.getCall);
// Find all calls between dates specified by 'start' and 'end' parameters (paginated by 'page',
// 'size' parameters)
router.get('/calls/between-dates', authStrategy, CallController.betweenDates);
// Find all calls specified by 'user_id' parameter (paginated by 'page', 'size' parameters)
router.get('/calls/by-user-id', authStrategy, CallController.getByUserId);
// Find all calls made from a number specified by 'from' parameter (paginated by 'page', 'size'
// parameters)
router.get('/calls/from-number', authStrategy, CallController.getByFromNumber);

// Dashboard returning currently logged user (extracted from token)
router.get('/dash', authStrategy, HomeController.Dashboard)

module.exports = router;